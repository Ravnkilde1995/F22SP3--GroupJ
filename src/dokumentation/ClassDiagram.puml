@startuml

Main --> "has a " DBConnection
Main --> "has a " Menu
Menu --> "has a " TournamentMenu
Menu --> "has a " TeamMenu
Menu --> "has a " PlayerMenu
Menu --> "has a " MatchMenu
TeamMenu --> "has a " Teams
MatchMenu --> "has a " Match
PlayerMenu --> "has a " Player
TournamentMenu --> "has a " Tournament
Repository --> "has a " TeamRepo
Repository --> "has a " TournamentRepo
Repository --> "has a " PlayerRepo
Repository --> "has a " MatchRepo

Class Main {
- Scanner input
- ArrayList<Teams> teams
- ArrayList<Match> matches
- ArrayList<Tournament> tournaments
+ loadData(load)
+ teams=teamsIO.loadData();
+ tournaments=tournamentIO.loadData();
+ matches=matchIO.loadData()
+ Menu.mainMenu(input, teams, matches, tournaments);
+ teamsIO.saveData(teams);
+ tournamentIO.saveData(tournaments);
+ matchIO.saveData(matches)
}

class DBConnection {
+ static Connection connection;
+ void createConnection()
}

Class Menu {
static ArrayList<Teams> teamsInTournament
static TeamRepo teamRepo
static TournamentRepo tournamentRepo
static MatchRepo matchRepo
static PlayerRepo playerRepo
+ void mainMenu()
}

class TournamentMenu {
+ void tournamentMenu(Scanner input, ArrayList<Teams> teams, ArrayList<Tournament> tournaments)
+ void createTournament(Scanner input, ArrayList<Tournament> (tournaments)
+ void addTeamToTournament(startTime, endTime, date, tournamentName)
+ void removeTeamFromTournament(Scanner input)
+ void showTournaments(ArrayList<Tournament> tournaments)
+ void showTeamsAddedToTournament()
+ void showPlacement(ArrayList<Teams> teams)
+ void deleteTournament(Scanner input, ArrayList<Tournament> tournaments)
}

class TeamMenu {
static TeamRepo teamRepo;
+ void teamMenu(Scanner input, ArrayList<Teams> teams)
+ void createTeam(Scanner input, ArrayList<Teams> teams)
+ void addPointsToTeam(Scanner input, ArrayList<Teams> teams)
+ void addGoalsToTeam(Scanner input, ArrayList<Teams> teams)
+ void showAllTeams(ArrayList<Teams> teams)
+ void deleteTeam(Scanner input, ArrayList<Teams> teams)
+ void searchForTeams(Scanner input, ArrayList<Teams> teams)
}

class PlayerMenu {
static PlayerRepo playerRepo;
+ void playerMenu(Scanner input, ArrayList<Player> players, ArrayList<Teams> teams)
+ void createPlayer(Scanner input, ArrayList<Player> players)
+ void addPlayerToTeam(Scanner input, ArrayList<Player> players, ArrayList<Teams> teams)
+ void deletePlayer(Scanner input, ArrayList<Player> players)
+ void searchForPlayer(Scanner input, ArrayList<Player> players)
}

class MatchMenu {
static MatchRepo matchRepo;
+ void matchMenu(Scanner input, ArrayList<Match> matches, ArrayList<Teams> teams)
+ void createMatch(Scanner input, ArrayList<Match> matches, ArrayList<Teams> teams)
+ void showAllMatches(ArrayList<Match> matches)
+ void deleteMatch(Scanner input, ArrayList<Match> matches)
}

Class Tournament {
- int startTime
- int endTime
- String date
- String tournamentName
+ ArrayList<Match> gamesPlayed
+ int getStartTime()
+ int getEndTime()
+ String getDate()
+ String getTournamentName()
+ String toString()

}

Class Teams {
- String teamName
- int teamMembers
- int numberOfGoals
- int points
+ String getTeamName()
+ int getNumberOfGoals()
+ void setNumberOfGoals(int numberOfGoals)
+ int getPoints()
+ void setPoints(int points)
+ int getTeamMembers()
+ toString()
+ int compareTo(Teams t)
}


Class Match {
- Teams teamOne
- Teams teamTwo
- int matchDate
- int matchTime
- int matchMonth
+ Teams getTeamOne()
+ Teams getTeamTwo()
+ int getMatchDate()
+ int getMatchTime()
+ int getMatchMonth()
+ String toString()
}

Class Player {
- int playerid
- String firstName
- String lastName
- int age
+ String getFirstName()
+ String getLastName()
+ int getAge()
+ int getPlayerid()
+ String toString()
}

interface Repository{
+ ArrayList<T> readAll()
+ void create(T t)
+ void delete(int id)
}

Class TeamRepo{
+ ArrayList<Teams> readAll()
+ void create(Teams teams)
+ void delete(int id)
}

Class TournamentRepo{
+ ArrayList<Tournament> readAll()
+ void create(Tournament tournaments)
+ void delete(int id)
}

Class MatchRepo{
+ ArrayList<Match> readAll()
+ void create(Match matches)
+ void delete(int id)
}

Class PlayerRepo{
+ ArrayList<Player> readAll()
+ void create(Player players)
+ void delete(int id)
}

@enduml